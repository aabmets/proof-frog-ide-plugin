{
    parserClass="io.github.aabmets.prooffroglang.parser.ProofFrogParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="ProofFrog"
    psiImplClassSuffix="Impl"
    psiPackage="io.github.aabmets.prooffroglang.psi"
    psiImplPackage="io.github.aabmets.prooffroglang.psi.impl"

    elementTypeHolderClass="io.github.aabmets.prooffroglang.psi.ProofFrogTypes"
    elementTypeClass="io.github.aabmets.prooffroglang.psi.ProofFrogElementType"
    tokenTypeClass="io.github.aabmets.prooffroglang.psi.ProofFrogTokenType"

    parserUtilClass="io.github.aabmets.prooffroglang.parser.ProofFrogParserUtil"
}

file ::= <<fileContent>> | VL_LINE_COMMENT;

private fileContent ::= primitiveContent | schemeContent | gameContent | proofContent;

private primitiveContent ::= &<<isPrimitiveFile>> primitiveProgram;
private schemeContent ::= &<<isSchemeFile>> schemeProgram;
private gameContent ::= &<<isGameFile>> gameProgram;
private proofContent ::= &<<isProofFile>> proofProgram;


// Primitive files grammar
primitiveProgram ::= primitive;
primitive ::= primitiveSignature ST_BRACE_L primitiveBody ST_BRACE_R;
primitiveSignature ::= CL_PRIMITIVE id ST_PAREN_L paramList? ST_PAREN_R;
primitiveBody ::= ((initializedField | methodSignature) PN_SEMI)*;


// Scheme files grammar
schemeProgram ::= moduleImport* scheme;
scheme ::= schemeSignature ST_BRACE_L schemeBody ST_BRACE_R;
schemeSignature ::= CL_SCHEME id ST_PAREN_L paramList? ST_PAREN_R KW_EXTENDS id;
schemeBody ::= (KW_REQUIRES expression PN_SEMI)* (field PN_SEMI | method)+;


// Game files grammar
gameProgram ::= moduleImport* game game gameExport;
game ::= gameSignature ST_BRACE_L gameBody ST_BRACE_R;
gameSignature ::= CL_GAME id ST_PAREN_L paramList? ST_PAREN_R;
gameBody ::=
    (field PN_SEMI)* method+ |
    (field PN_SEMI)* method*
    gamePhase+
    ;
gamePhase ::=
    NB_PHASE ST_BRACE_L (method)+ KW_ORACLES PN_COLON
    ST_BRACKET_L id (PN_COMMA id)* ST_BRACKET_R
    PN_SEMI ST_BRACE_R
    ;
gameExport ::= KW_EXPORT KW_AS id PN_SEMI;


// Proof files grammar
proofProgram ::= moduleImport* (reduction | game)* proof;
reduction ::= reductionSignature ST_BRACE_L gameBody ST_BRACE_R;
reductionSignature ::=
    CL_REDUCTION id ST_PAREN_L paramList? ST_PAREN_R
    KW_COMPOSE parameterizedGame KW_AGAINST gameAdversary
    ;
proof ::= proofBlock letsBlock? assumeBlock? theoremBlock gamesBlock;
proofBlock ::= LB_PROOF PN_COLON;
letsBlock ::= LB_LET PN_COLON lets;
assumeBlock ::= LB_ASSUME PN_COLON assumptions;
theoremBlock ::= LB_THEOREM PN_COLON theorem;
gamesBlock ::= LB_GAMES PN_COLON gameList;
lets ::= (field PN_SEMI)*;
assumptions ::=
    (parameterizedGame PN_SEMI)*
    (KW_CALLS (OP_LEQ | OP_LT) expression PN_SEMI)?
    ;
theorem ::= parameterizedGame PN_SEMI;
gameList ::= gameStep PN_SEMI (gameStep PN_SEMI | induction | stepAssumption)*;
gameStep ::=
    concreteGame KW_COMPOSE parameterizedGame KW_AGAINST gameAdversary |  // reductionStep
	(concreteGame | parameterizedGame) KW_AGAINST gameAdversary           // regularStep
	;
induction ::=
    KW_INDUCTION ST_PAREN_L id KW_FROM integerExpr KW_TO
    integerExpr ST_PAREN_R ST_BRACE_L gameList ST_BRACE_R
    ;
stepAssumption ::= LB_ASSUME expression PN_SEMI;
concreteGame ::= parameterizedGame PN_PERIOD id;
gameAdversary ::= parameterizedGame PN_PERIOD PR_ADVERSARY;


// Shared grammar

id ::= VL_IDENTIFIER;

moduleImport ::= KW_IMPORT filePath (KW_AS id)? PN_SEMI;

filePath ::= VL_FILE_PATH {
    mixin="io.github.aabmets.prooffroglang.reference.ProofFrogFileReferenceProvider"
    methods=[getReference]
};

field ::= variable (OP_ASSIGN expression)?;

initializedField ::= variable OP_ASSIGN expression;

method ::= methodSignature block;

block ::= ST_BRACE_L statement* ST_BRACE_R;

statement ::=
      varDeclStmt
    | varDeclAssignStmt
    | varDeclSampleStmt
    | assignStmt
    | sampleStmt
    | callStmt
    | returnStmt
    | conditionalStmt
    | integerLoopStmt
    | genericLoopStmt
    ;
varDeclStmt ::= variable PN_SEMI;
varDeclAssignStmt ::= type lvalue OP_ASSIGN expression PN_SEMI;
varDeclSampleStmt ::= type lvalue OP_SAMPLE expression PN_SEMI;
assignStmt ::= lvalue OP_ASSIGN expression PN_SEMI;
sampleStmt ::= lvalue OP_SAMPLE expression PN_SEMI;
callStmt ::= expression ST_PAREN_L argList? ST_PAREN_R PN_SEMI;
returnStmt ::= KW_RETURN expression PN_SEMI;
conditionalStmt ::=
    KW_IF ST_PAREN_L expression ST_PAREN_R block
    (KW_ELSE KW_IF ST_PAREN_L expression ST_PAREN_R block)*
    (KW_ELSE block)?
    ;
integerLoopStmt ::=
    KW_FOR ST_PAREN_L DT_INT id OP_ASSIGN
    expression KW_TO expression ST_PAREN_R block
    ;
genericLoopStmt ::=
    KW_FOR ST_PAREN_L variable KW_IN expression ST_PAREN_R block
    ;

lvalue ::= (id | parameterizedGame) (PN_PERIOD id | ST_BRACKET_L expression ST_BRACKET_R)*;

methodSignature ::= type id ST_PAREN_L paramList? ST_PAREN_R;

paramList ::= variable (PN_COMMA variable)*;

expression ::= setMinusExpr ;
setMinusExpr ::= unionExpr (OP_BSLASH unionExpr)*;
unionExpr ::= orExpr (KW_UNION orExpr)*;
orExpr ::= andExpr (OP_OR andExpr)*;
andExpr ::= compareExpr (OP_AND compareExpr)*;
compareExpr ::= addExpr (
    (OP_EQ | OP_NEQ | OP_GT | OP_LT | OP_GEQ | OP_LEQ | KW_IN | KW_SUBSETS)
    addExpr
)?;
addExpr ::= multiplyExpr ( (OP_ADD | OP_SUB) multiplyExpr )*;
multiplyExpr ::= unaryExpr ( (OP_MULT | OP_DIV) unaryExpr )*;
unaryExpr ::=
      OP_NOT unaryExpr
    | OP_SUB unaryExpr
    | OP_VBAR expression OP_VBAR
    | primaryExpr
    ;
primaryExpr ::= primaryElem (callExpr | sliceExpr)*;
primaryElem ::=
      lvalue
    | VL_INT
    | VL_BINARYNUM
    | VL_BOOL
    | KW_NONE
    | type
    | ST_BRACKET_L (expression (PN_COMMA expression)*)? ST_BRACKET_R
    | ST_BRACE_L  (expression (PN_COMMA expression)*)? ST_BRACE_R
    | ST_PAREN_L expression ST_PAREN_R
    ;
callExpr ::= ST_PAREN_L argList? ST_PAREN_R;
sliceExpr ::= ST_BRACKET_L integerExpr PN_COLON integerExpr ST_BRACKET_R;

argList ::= expression (PN_COMMA expression)*;

variable ::= type id;

parameterizedGame ::= id ST_PAREN_L argList? ST_PAREN_R;

type ::= typeProduct ;
typeProduct ::= atomicType (OP_MULT atomicType)*;
atomicType ::=
      typedSet OP_OPT?
    | typedMap OP_OPT?
    | typedArray OP_OPT?
    | typedBitString OP_OPT?
    | lvalue OP_OPT?
    | DT_SET OP_OPT?
    | DT_BOOL OP_OPT?
    | DT_VOID OP_OPT?
    | DT_INT OP_OPT?
    | DT_BITSTRING OP_OPT?
    ;
typedSet ::= DT_SET OP_LT type OP_GT;
typedMap ::= DT_MAP OP_LT type PN_COMMA type OP_GT;
typedArray ::= DT_ARRAY OP_LT type PN_COMMA integerExpr OP_GT;
typedBitString ::= DT_BITSTRING OP_LT integerExpr OP_GT;

integerExpr ::= addIntegerExpr ;
addIntegerExpr ::=
      multiplyIntegerExpr
    ( (OP_ADD | OP_SUB) multiplyIntegerExpr )*
    ;
multiplyIntegerExpr ::=
      primaryIntegerExpr
    ( (OP_MULT | OP_DIV) primaryIntegerExpr )*
    ;
primaryIntegerExpr ::=
      lvalue
    | VL_INT
    | VL_BINARYNUM
    | ST_PAREN_L integerExpr ST_PAREN_R
    ;
