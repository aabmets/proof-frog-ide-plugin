// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ProofFrog.flex

package io.github.aabmets.prooffroglang;

import io.github.aabmets.prooffroglang.psi.ProofFrogTypes;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


class ProofFrogLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\2\0\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\10\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\4\6\1\34\1\6\1\35\3\6\1\36\1\37"+
    "\1\6\1\40\1\6\1\41\1\42\2\6\1\43\4\6"+
    "\1\44\1\45\1\46\1\0\1\6\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\6"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\6\1\73\1\74\1\6\1\75"+
    "\1\76\1\77\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\12\4\1\24\1\25"+
    "\1\26\15\4\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\17\4\1\41"+
    "\10\4\1\42\1\4\1\43\6\4\1\44\2\4\1\45"+
    "\1\46\1\47\5\4\1\50\1\51\5\4\1\52\11\4"+
    "\1\53\4\4\1\54\13\4\1\55\1\56\1\57\4\4"+
    "\1\60\4\4\1\61\2\4\1\62\11\4\1\63\2\4"+
    "\1\64\1\4\1\65\5\4\1\66\3\4\1\67\3\4"+
    "\1\70\4\4\1\71\4\4\1\72\1\4\1\73\1\4"+
    "\1\74\1\4\1\75\3\4\1\76\6\4\1\77\1\100"+
    "\1\101\1\4\1\102\1\4\1\103\1\104\5\4\1\105"+
    "\1\106\1\107\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u01c0\0\u0200"+
    "\0\u0240\0\100\0\100\0\u0280\0\u02c0\0\u0300\0\100\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\100\0\100\0\100\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880"+
    "\0\u08c0\0\100\0\u0900\0\100\0\100\0\100\0\u0940\0\u0980"+
    "\0\u09c0\0\100\0\100\0\100\0\100\0\u0a00\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u0100\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u0100\0\u1200"+
    "\0\u1240\0\100\0\100\0\u09c0\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u0100\0\u0100\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0"+
    "\0\u0100\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u0100\0\u1740\0\u1780\0\u17c0\0\u1800\0\u0100"+
    "\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u0100\0\u0100\0\u0100\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u0100\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u0100"+
    "\0\u1d00\0\u1d40\0\u0100\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u0100\0\u1fc0\0\u2000\0\u0100"+
    "\0\u2040\0\u0100\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u0100"+
    "\0\u21c0\0\u2200\0\u2240\0\u0100\0\u2280\0\u22c0\0\u2300\0\u0100"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u0100\0\u2440\0\u2480\0\u24c0"+
    "\0\u2500\0\u0100\0\u2540\0\u0100\0\u2580\0\u0100\0\u25c0\0\u0100"+
    "\0\u2600\0\u2640\0\u2680\0\u0100\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u0100\0\u0100\0\u0100\0\u2840\0\u0100\0\u2880"+
    "\0\u0100\0\u0100\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\5\1\46"+
    "\1\5\1\47\1\50\1\51\1\5\1\52\1\53\2\5"+
    "\1\54\1\55\1\5\1\56\1\57\1\60\1\61\3\5"+
    "\1\62\1\63\1\64\101\0\2\3\1\0\1\3\122\0"+
    "\1\65\56\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\26\5\12\0\1\66\74\0\1\67\1\0\1\67\7\0"+
    "\6\67\2\0\3\67\1\0\12\67\3\0\26\67\23\0"+
    "\1\70\100\0\3\21\24\0\1\71\50\0\3\21\72\0"+
    "\1\72\10\0\1\73\77\0\1\74\77\0\1\75\56\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\3\5\1\76"+
    "\13\5\1\77\6\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\10\5\1\100\3\5\1\101\11\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\1\102\25\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\13\5"+
    "\1\103\12\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\1\104\25\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\14\5\1\105\11\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\7\5\1\106\7\5\1\107"+
    "\6\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\4\5\1\110\21\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\2\5\1\111\1\5\1\112\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\14\5\1\113"+
    "\11\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\6\5\1\114\11\5\1\115\5\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\1\116\13\5\1\117\11\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\11\5"+
    "\1\120\12\5\1\121\1\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\1\122\13\5\1\123\2\5\1\124"+
    "\6\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\1\125\25\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\5\5\1\126\4\5\1\127\1\130\12\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\4\5\1\131"+
    "\21\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\17\5\1\132\6\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\17\5\1\133\6\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\4\5\1\134\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\22\5\1\135"+
    "\3\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\7\5\1\136\4\5\1\137\2\5\1\140\6\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\13\5\1\141"+
    "\12\5\101\0\1\142\5\0\1\67\1\0\1\67\1\0"+
    "\1\143\5\0\6\67\2\0\3\67\1\0\12\67\3\0"+
    "\26\67\3\0\2\70\2\0\74\70\21\0\2\144\63\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\23\5\1\145"+
    "\2\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\17\5\1\146\6\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\21\5\1\147\4\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\14\5\1\150\11\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\12\5\1\151"+
    "\13\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\21\5\1\152\4\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\15\5\1\153\10\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\13\5\1\154\12\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\1\155\25\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\10\5"+
    "\1\156\15\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\3\5\1\157\22\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\7\5\1\160\16\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\21\5\1\161\4\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\10\5"+
    "\1\162\15\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\1\163\25\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\20\5\1\164\5\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\11\5\1\165\14\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\12\5\1\166"+
    "\13\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\20\5\1\167\5\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\15\5\1\170\3\5\1\171\4\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\11\5\1\172"+
    "\14\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\17\5\1\173\6\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\14\5\1\174\11\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\12\5\1\175\13\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\15\5\1\176"+
    "\10\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\3\5\1\177\22\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\21\5\1\200\4\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\1\201\25\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\14\5\1\202\11\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\16\5"+
    "\1\203\2\5\1\204\4\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\1\5\1\205\24\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\206\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\22\5"+
    "\1\207\3\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\10\5\1\210\15\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\4\5\1\211\21\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\1\212\25\5\11\0"+
    "\1\5\12\0\3\5\6\0\10\5\1\213\1\5\3\0"+
    "\26\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\11\5\1\214\14\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\4\5\1\215\21\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\4\5\1\216\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\20\5\1\217"+
    "\5\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\12\5\1\220\13\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\22\5\1\221\3\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\4\5\1\222\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\3\5\1\223"+
    "\22\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\10\5\1\224\15\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\22\5\1\225\3\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\11\5\1\226\14\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\15\5\1\227"+
    "\10\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\4\5\1\230\21\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\14\5\1\231\11\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\4\5\1\232\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\20\5\1\207"+
    "\5\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\12\5\1\233\13\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\4\5\1\234\21\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\14\5\1\235\11\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\22\5\1\236"+
    "\3\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\2\5\1\237\23\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\14\5\1\240\11\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\22\5\1\241\3\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\22\5\1\242"+
    "\3\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\20\5\1\243\5\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\14\5\1\244\11\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\4\5\1\245\21\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\14\5\1\246"+
    "\11\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\17\5\1\247\6\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\25\5\1\250\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\21\5\1\251\4\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\252\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\10\5"+
    "\1\253\15\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\2\5\1\254\23\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\12\5\1\255\13\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\13\5\1\256\12\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\12\5"+
    "\1\257\13\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\20\5\1\260\5\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\14\5\1\261\11\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\17\5\1\262\6\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\13\5"+
    "\1\263\12\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\20\5\1\264\5\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\17\5\1\265\6\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\2\5\1\266\23\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\11\5"+
    "\1\267\14\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\5\5\1\270\20\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\10\5\1\271\15\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\17\5\1\272\6\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\4\5"+
    "\1\273\21\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\17\5\1\274\6\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\13\5\1\275\12\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\20\5\1\276\5\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\17\5"+
    "\1\277\6\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\21\5\1\300\4\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\21\5\1\301\4\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\302\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\20\5"+
    "\1\303\5\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\4\5\1\304\21\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\20\5\1\305\5\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\21\5\1\306\4\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\3\5"+
    "\1\307\22\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\21\5\1\310\4\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\21\5\1\311\4\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\312\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\17\5"+
    "\1\313\6\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\13\5\1\314\12\5\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\21\5\1\315\4\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\316\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\1\317"+
    "\25\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\10\5\1\320\15\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\10\5\1\321\15\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\10\5\1\322\15\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\21\5\1\323"+
    "\4\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\4\5\1\324\21\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\20\5\1\325\5\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\10\5\1\326\15\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\20\5\1\327"+
    "\5\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\4\5\1\330\21\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\20\5\1\331\5\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\12\5\1\332\13\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\17\5\1\333"+
    "\6\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\13\5\1\334\12\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\23\5\1\335\2\5\11\0\1\5\12\0"+
    "\3\5\6\0\12\5\3\0\14\5\1\336\11\5\11\0"+
    "\1\5\12\0\3\5\6\0\12\5\3\0\14\5\1\337"+
    "\11\5\11\0\1\5\12\0\3\5\6\0\12\5\3\0"+
    "\20\5\1\340\5\5\11\0\1\5\12\0\3\5\6\0"+
    "\12\5\3\0\25\5\1\341\11\0\1\5\12\0\3\5"+
    "\6\0\12\5\3\0\6\5\1\342\17\5\11\0\1\5"+
    "\12\0\3\5\6\0\12\5\3\0\4\5\1\343\21\5"+
    "\11\0\1\5\12\0\3\5\6\0\12\5\3\0\13\5"+
    "\1\344\12\5\11\0\1\5\12\0\3\5\6\0\12\5"+
    "\3\0\13\5\1\345\12\5\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10752];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\7\11\3\1\2\11\3\1\1\11"+
    "\12\1\3\11\15\1\1\11\1\1\3\11\1\0\1\1"+
    "\1\0\4\11\44\1\2\11\202\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ProofFrogLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 76: break;
          case 3:
            { return ProofFrogTypes.O_NOT;
            }
          // fall through
          case 77: break;
          case 4:
            { return ProofFrogTypes.V_IDENT;
            }
          // fall through
          case 78: break;
          case 5:
            { return ProofFrogTypes.S_PAREN_L;
            }
          // fall through
          case 79: break;
          case 6:
            { return ProofFrogTypes.S_PAREN_R;
            }
          // fall through
          case 80: break;
          case 7:
            { return ProofFrogTypes.O_MULT;
            }
          // fall through
          case 81: break;
          case 8:
            { return ProofFrogTypes.O_ADD;
            }
          // fall through
          case 82: break;
          case 9:
            { return ProofFrogTypes.P_COMMA;
            }
          // fall through
          case 83: break;
          case 10:
            { return ProofFrogTypes.O_SUB;
            }
          // fall through
          case 84: break;
          case 11:
            { return ProofFrogTypes.P_PERIOD;
            }
          // fall through
          case 85: break;
          case 12:
            { return ProofFrogTypes.O_DIV;
            }
          // fall through
          case 86: break;
          case 13:
            { return ProofFrogTypes.V_INT;
            }
          // fall through
          case 87: break;
          case 14:
            { return ProofFrogTypes.P_COLON;
            }
          // fall through
          case 88: break;
          case 15:
            { return ProofFrogTypes.P_SEMIC;
            }
          // fall through
          case 89: break;
          case 16:
            { return ProofFrogTypes.O_LT;
            }
          // fall through
          case 90: break;
          case 17:
            { return ProofFrogTypes.O_ASGN;
            }
          // fall through
          case 91: break;
          case 18:
            { return ProofFrogTypes.O_GT;
            }
          // fall through
          case 92: break;
          case 19:
            { return ProofFrogTypes.O_OPT;
            }
          // fall through
          case 93: break;
          case 20:
            { return ProofFrogTypes.S_BRACKET_L;
            }
          // fall through
          case 94: break;
          case 21:
            { return ProofFrogTypes.O_BSLASH;
            }
          // fall through
          case 95: break;
          case 22:
            { return ProofFrogTypes.S_BRACKET_R;
            }
          // fall through
          case 96: break;
          case 23:
            { return ProofFrogTypes.S_BRACE_L;
            }
          // fall through
          case 97: break;
          case 24:
            { return ProofFrogTypes.O_VBAR;
            }
          // fall through
          case 98: break;
          case 25:
            { return ProofFrogTypes.S_BRACE_R;
            }
          // fall through
          case 99: break;
          case 26:
            { return ProofFrogTypes.O_NEQ;
            }
          // fall through
          case 100: break;
          case 27:
            { return ProofFrogTypes.O_AND;
            }
          // fall through
          case 101: break;
          case 28:
            { return ProofFrogTypes.V_LINE_COMMENT;
            }
          // fall through
          case 102: break;
          case 29:
            { return ProofFrogTypes.O_SMPL;
            }
          // fall through
          case 103: break;
          case 30:
            { return ProofFrogTypes.O_LEQ;
            }
          // fall through
          case 104: break;
          case 31:
            { return ProofFrogTypes.O_EQ;
            }
          // fall through
          case 105: break;
          case 32:
            { return ProofFrogTypes.O_GEQ;
            }
          // fall through
          case 106: break;
          case 33:
            { return ProofFrogTypes.K_AS;
            }
          // fall through
          case 107: break;
          case 34:
            { return ProofFrogTypes.K_IF;
            }
          // fall through
          case 108: break;
          case 35:
            { return ProofFrogTypes.K_IN;
            }
          // fall through
          case 109: break;
          case 36:
            { return ProofFrogTypes.K_TO;
            }
          // fall through
          case 110: break;
          case 37:
            { return ProofFrogTypes.O_OR;
            }
          // fall through
          case 111: break;
          case 38:
            { return ProofFrogTypes.V_FILESTRING;
            }
          // fall through
          case 112: break;
          case 39:
            { return ProofFrogTypes.V_BINARYNUM;
            }
          // fall through
          case 113: break;
          case 40:
            { return ProofFrogTypes.T_INT;
            }
          // fall through
          case 114: break;
          case 41:
            { return ProofFrogTypes.T_MAP;
            }
          // fall through
          case 115: break;
          case 42:
            { return ProofFrogTypes.T_SET;
            }
          // fall through
          case 116: break;
          case 43:
            { return ProofFrogTypes.K_FOR;
            }
          // fall through
          case 117: break;
          case 44:
            { return ProofFrogTypes.K_LET;
            }
          // fall through
          case 118: break;
          case 45:
            { return ProofFrogTypes.T_BOOL;
            }
          // fall through
          case 119: break;
          case 46:
            { return ProofFrogTypes.F_GAME;
            }
          // fall through
          case 120: break;
          case 47:
            { return ProofFrogTypes.K_NONE;
            }
          // fall through
          case 121: break;
          case 48:
            { return ProofFrogTypes.T_VOID;
            }
          // fall through
          case 122: break;
          case 49:
            { return ProofFrogTypes.K_ELSE;
            }
          // fall through
          case 123: break;
          case 50:
            { return ProofFrogTypes.K_FROM;
            }
          // fall through
          case 124: break;
          case 51:
            { return ProofFrogTypes.V_BOOL;
            }
          // fall through
          case 125: break;
          case 52:
            { return ProofFrogTypes.T_ARRAY;
            }
          // fall through
          case 126: break;
          case 53:
            { return ProofFrogTypes.F_PHASE;
            }
          // fall through
          case 127: break;
          case 54:
            { return ProofFrogTypes.K_CALLS;
            }
          // fall through
          case 128: break;
          case 55:
            { return ProofFrogTypes.K_GAMES;
            }
          // fall through
          case 129: break;
          case 56:
            { return ProofFrogTypes.K_PROOF;
            }
          // fall through
          case 130: break;
          case 57:
            { return ProofFrogTypes.K_UNION;
            }
          // fall through
          case 131: break;
          case 58:
            { return ProofFrogTypes.F_SCHEME;
            }
          // fall through
          case 132: break;
          case 59:
            { return ProofFrogTypes.K_ASSUME;
            }
          // fall through
          case 133: break;
          case 60:
            { return ProofFrogTypes.K_EXPORT;
            }
          // fall through
          case 134: break;
          case 61:
            { return ProofFrogTypes.K_IMPORT;
            }
          // fall through
          case 135: break;
          case 62:
            { return ProofFrogTypes.K_RETURN;
            }
          // fall through
          case 136: break;
          case 63:
            { return ProofFrogTypes.K_AGAINST;
            }
          // fall through
          case 137: break;
          case 64:
            { return ProofFrogTypes.K_COMPOSE;
            }
          // fall through
          case 138: break;
          case 65:
            { return ProofFrogTypes.K_EXTENDS;
            }
          // fall through
          case 139: break;
          case 66:
            { return ProofFrogTypes.K_ORACLES;
            }
          // fall through
          case 140: break;
          case 67:
            { return ProofFrogTypes.K_SUBSETS;
            }
          // fall through
          case 141: break;
          case 68:
            { return ProofFrogTypes.K_THEOREM;
            }
          // fall through
          case 142: break;
          case 69:
            { return ProofFrogTypes.K_REQUIRES;
            }
          // fall through
          case 143: break;
          case 70:
            { return ProofFrogTypes.F_ADVERSARY;
            }
          // fall through
          case 144: break;
          case 71:
            { return ProofFrogTypes.T_BITSTRING;
            }
          // fall through
          case 145: break;
          case 72:
            { return ProofFrogTypes.F_PRIMITIVE;
            }
          // fall through
          case 146: break;
          case 73:
            { return ProofFrogTypes.F_REDUCTION;
            }
          // fall through
          case 147: break;
          case 74:
            { return ProofFrogTypes.K_INDUCTION;
            }
          // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
